{"version":3,"file":"qrcodemodal.min.js","sources":["../src/qrcodemodal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Generate the QR code.\n *\n * @module     tiny_qrcode/qrcodemodal\n * @copyright  2024 Brain Station 23 Ltd. <brainstation-23.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n *\n */\n\nimport Modal from 'core/modal';\nimport {component} from './common';\nimport AJAX from 'core/ajax';\nimport {getString} from 'core/str';\n\nexport default class QrcodeModal extends Modal {\n\n    static TYPE = `${component}/qrcodemodal`;\n    static TEMPLATE = `${component}/insert_qrcode_modal`;\n\n    registerEventListeners() {\n\n        const attachSubmitHandler = async() => {\n            const altTextPrefix = await getString('altTextPrefix', 'tiny_qrcode');\n\n            const qrcodeForm = window.document.getElementById('qrcode-submit');\n            const closebtn= window.document.querySelector('div.modal div.modal-content div.modal-header button.btn-close');\n            const closebtn1= window.document.querySelector('div.modal div.modal-content div.modal-header button.close');\n            if (closebtn){\n                closebtn.addEventListener( 'click', (event) => {\n                    this.destroy();\n                });}\n            if (closebtn1){\n                closebtn1.addEventListener( 'click', (event) => {\n                    this.destroy();\n                });}\n\n            if (qrcodeForm) {\n                if (!qrcodeForm.dataset.listenerAttached) {\n                    qrcodeForm.addEventListener( 'click', (event) => {\n                        event.preventDefault();\n                        let flag=0;\n\n                        const qrsize = window.document.querySelector('#qrcode_size').value;\n                        if(qrsize > 1000 || qrsize < 25){\n                            window.document.querySelector('#qrcode_size').style.border = '2px solid red';\n                            flag=1;\n                        } else{\n                            window.document.querySelector('#qrcode_size').style.border = '1px solid black';\n                        }\n\n                        const qrmargin = window.document.querySelector('#qrcode_margin').value;\n                        if(qrmargin> 100 || qrmargin < 5){\n                            window.document.querySelector('#qrcode_margin').style.border = '2px solid red';\n                            flag=1;\n                        } else {\n                            window.document.querySelector('#qrcode_margin').style.border = '1px solid black';\n                        }\n\n                        const contentInput = window.document.querySelector('#qrcodecontent');\n                        if(contentInput.value.trim() === ''){\n                            contentInput.style.border = '2px solid red';\n                            flag=1;\n                        }else{\n                            contentInput.style.border = '1px solid black';\n                        }\n\n                        if(flag){\n                            return;\n                        }\n                        flag=0;\n\n                        if(contentInput.value.trim() !== ''){\n                            const hexToRgba = (hex, alpha = 1) => {\n                                hex = hex.replace(/^#/, '');\n                                const bigint = parseInt(hex, 16);\n                                const r = (bigint >> 16) & 255;\n                                const g = (bigint >> 8) & 255;\n                                const b = bigint & 255;\n                                return {\n                                    r: r,\n                                    g: g,\n                                    b: b,\n                                    a: alpha\n                                };\n                            };\n                            // Prepare form data for submission\n                            const formData = {\n                                content: document.querySelector('#qrcodecontent').value,\n                                size: parseInt(document.querySelector('#qrcode_size').value),\n                                margin: parseInt(document.querySelector('#qrcode_margin').value),\n                                bgColor: hexToRgba(\n                                    document.querySelector('#bgtemplateColor').value,\n                                    parseFloat(document.querySelector('#bgcolor_a')?.value || 1)\n                                ),\n                                fgColor: hexToRgba(\n                                    document.querySelector('#templateColor').value,\n                                    parseFloat(document.querySelector('#color_a')?.value || 1)\n                                ),\n                            };\n                            // Moodle AJAX call to web service\n                            AJAX.call([{\n                                methodname: 'tiny_qrcode_generate_qr_code',\n                                args: {data: JSON.stringify({\n                                    content: formData.content,\n                                    size: formData.size,\n                                    margin: formData.margin,\n                                    bgColor: formData.bgColor,\n                                    fgColor: formData.fgColor,\n                                })},\n                                done: function(response) {\n                                    if (response.status) {\n                                        const targetEditor = window.currentQRCodeEditor;\n                                        if (targetEditor) {\n                                            targetEditor.insertContent(`<img src=\"${response.datauri}\" alt=\"${altTextPrefix}  ${formData.content}\" />`);\n                                        }\n                                    }\n                                    // Clean up the stored editor reference\n                                    window.currentQRCodeEditor = null;\n                                },\n                                fail: function() {\n                                    // Clean up the stored editor reference\n                                    window.currentQRCodeEditor = null;\n                                }\n                            }]);\n                            this.destroy();\n                        }\n                        else{\n                            contentInput.style.border = '2px solid red';\n                            //  return;\n                        }\n                    });\n                    qrcodeForm.dataset.listenerAttached = true;\n                }\n            } else {\n                setTimeout(attachSubmitHandler, 500);\n            }\n        };\n        // Attach the submit handler\n        attachSubmitHandler();\n    }\n    configure(modalConfig) {\n        modalConfig.show = true;\n        super.configure(modalConfig);\n    }\n}\n"],"names":["QrcodeModal","Modal","registerEventListeners","attachSubmitHandler","async","altTextPrefix","qrcodeForm","window","document","getElementById","closebtn","querySelector","closebtn1","addEventListener","event","destroy","dataset","listenerAttached","preventDefault","flag","qrsize","value","style","border","qrmargin","contentInput","trim","hexToRgba","hex","alpha","replace","bigint","parseInt","r","g","b","a","formData","content","size","margin","bgColor","parseFloat","fgColor","call","methodname","args","data","JSON","stringify","done","response","status","targetEditor","currentQRCodeEditor","insertContent","datauri","fail","setTimeout","configure","modalConfig","show","component"],"mappings":"giBA6BqBA,oBAAoBC,eAKrCC,+BAEUC,oBAAsBC,gBAClBC,oBAAsB,kBAAU,gBAAiB,eAEjDC,WAAaC,OAAOC,SAASC,eAAe,iBAC5CC,SAAUH,OAAOC,SAASG,cAAc,iEACxCC,UAAWL,OAAOC,SAASG,cAAc,6DAC3CD,UACAA,SAASG,iBAAkB,SAAUC,aAC5BC,aAETH,WACAA,UAAUC,iBAAkB,SAAUC,aAC7BC,aAGTT,WACKA,WAAWU,QAAQC,mBACpBX,WAAWO,iBAAkB,SAAUC,QACnCA,MAAMI,qBACFC,KAAK,QAEHC,OAASb,OAAOC,SAASG,cAAc,gBAAgBU,MAC1DD,OAAS,KAAQA,OAAS,IACzBb,OAAOC,SAASG,cAAc,gBAAgBW,MAAMC,OAAS,gBAC7DJ,KAAK,GAELZ,OAAOC,SAASG,cAAc,gBAAgBW,MAAMC,OAAS,wBAG3DC,SAAWjB,OAAOC,SAASG,cAAc,kBAAkBU,MAC9DG,SAAU,KAAOA,SAAW,GAC3BjB,OAAOC,SAASG,cAAc,kBAAkBW,MAAMC,OAAS,gBAC/DJ,KAAK,GAELZ,OAAOC,SAASG,cAAc,kBAAkBW,MAAMC,OAAS,wBAG7DE,aAAelB,OAAOC,SAASG,cAAc,qBAClB,KAA9Bc,aAAaJ,MAAMK,QAClBD,aAAaH,MAAMC,OAAS,gBAC5BJ,KAAK,GAELM,aAAaH,MAAMC,OAAS,mBAG7BJ,QAGHA,KAAK,EAE4B,KAA9BM,aAAaJ,MAAMK,OAAc,wDAC1BC,UAAY,SAACC,SAAKC,6DAAQ,EAC5BD,IAAMA,IAAIE,QAAQ,KAAM,UAClBC,OAASC,SAASJ,IAAK,IACvBK,EAAKF,QAAU,GAAM,IACrBG,EAAKH,QAAU,EAAK,IACpBI,EAAa,IAATJ,aACH,CACHE,EAAGA,EACHC,EAAGA,EACHC,EAAGA,EACHC,EAAGP,QAILQ,SAAW,CACbC,QAAS9B,SAASG,cAAc,kBAAkBU,MAClDkB,KAAMP,SAASxB,SAASG,cAAc,gBAAgBU,OACtDmB,OAAQR,SAASxB,SAASG,cAAc,kBAAkBU,OAC1DoB,QAASd,UACLnB,SAASG,cAAc,oBAAoBU,MAC3CqB,0CAAWlC,SAASG,cAAc,4EAAeU,QAAS,IAE9DsB,QAAShB,UACLnB,SAASG,cAAc,kBAAkBU,MACzCqB,2CAAWlC,SAASG,cAAc,4EAAaU,QAAS,mBAI3DuB,KAAK,CAAC,CACPC,WAAY,+BACZC,KAAM,CAACC,KAAMC,KAAKC,UAAU,CACxBX,QAASD,SAASC,QAClBC,KAAMF,SAASE,KACfC,OAAQH,SAASG,OACjBC,QAASJ,SAASI,QAClBE,QAASN,SAASM,WAEtBO,KAAM,SAASC,aACPA,SAASC,OAAQ,OACXC,aAAe9C,OAAO+C,oBACxBD,cACAA,aAAaE,kCAA2BJ,SAASK,0BAAiBnD,2BAAkBgC,SAASC,iBAIrG/B,OAAO+C,oBAAsB,MAEjCG,KAAM,WAEFlD,OAAO+C,oBAAsB,cAGhCvC,eAGLU,aAAaH,MAAMC,OAAS,mBAIpCjB,WAAWU,QAAQC,kBAAmB,GAG1CyC,WAAWvD,oBAAqB,MAIxCA,sBAEJwD,UAAUC,aACNA,YAAYC,MAAO,QACbF,UAAUC,kEAhIH5D,6BAEA8D,mDAFA9D,iCAGI8D"}
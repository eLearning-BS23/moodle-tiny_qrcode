{"version":3,"file":"qrcodemodal.min.js","sources":["../src/qrcodemodal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Generate the QR code.\n *\n * @module     tiny_qrcode/qrcodemodal\n * @copyright  2024 Brain Station 23 Ltd. <brainstation-23.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n *\n */\n\nimport Modal from 'core/modal';\nimport {component} from './common';\nimport AJAX from 'core/ajax';\n\nexport default class QrcodeModal extends Modal {\n\n    static TYPE = `${component}/qrcodemodal`;\n    static TEMPLATE = `${component}/insert_qrcode_modal`;\n\n    registerEventListeners() {\n\n        const attachSubmitHandler = () => {\n            const qrcodeForm = window.document.getElementById('qrcode-submit');\n            const closebtn= window.document.querySelector('div.modal div.modal-content div.modal-header button.btn-close');\n            if (closebtn){\n                closebtn.addEventListener( 'click', (event) => {\n                    this.destroy();\n\n                });}\n\n            if (qrcodeForm) {\n                if (!qrcodeForm.dataset.listenerAttached) {\n                    qrcodeForm.addEventListener( 'click', (event) => {\n                        event.preventDefault();\n                        const contentInput = window.document.querySelector('#qrcodecontent');\n                        const qrsize = window.document.querySelector('#qrcode_size').value;\n                        if(qrsize > 1000 || qrsize < 5){\n                            window.document.querySelector('#qrcode_size').style.border = '2px solid red';\n                            return;\n                        }\n                        const qrmargin = window.document.querySelector('#qrcode_margin').value;\n                        if(qrmargin> 100 || qrmargin < 5){\n                            window.document.querySelector('#qrcode_margin').style.border = '2px solid red';\n                            return;\n                        }\n\n                        if(contentInput.value.trim() !== ''){\n                        const hexToRgba = (hex, alpha = 1) => {\n                            hex = hex.replace(/^#/, '');\n                            const bigint = parseInt(hex, 16);\n                            const r = (bigint >> 16) & 255;\n                            const g = (bigint >> 8) & 255;\n                            const b = bigint & 255;\n                            return {\n                                r: r,\n                                g: g,\n                                b: b,\n                                a: alpha\n                            };\n                        };\n                        // Prepare form data for submission\n                        const formData = {\n                            content: document.querySelector('#qrcodecontent').value,\n                            size: parseInt(document.querySelector('#qrcode_size').value),\n                            margin: parseInt(document.querySelector('#qrcode_margin').value),\n                            bgColor: hexToRgba(\n                                document.querySelector('#bgtemplateColor').value,\n                                parseFloat(document.querySelector('#bgcolor_a')?.value || 1)\n                            ),\n                            fgColor: hexToRgba(\n                                document.querySelector('#templateColor').value,\n                                parseFloat(document.querySelector('#color_a')?.value || 1)\n                            ),\n                        };\n                        // Moodle AJAX call to web service\n                        AJAX.call([{\n                            methodname: 'tiny_qrcode_generate_qr_code',\n                            args: {data: JSON.stringify({\n                                content: formData.content,\n                                size: formData.size,\n                                margin: formData.margin,\n                                bgColor: formData.bgColor,\n                                fgColor: formData.fgColor,\n                            })},\n                            done: function(response) {\n                                if (response.status) {\n                                    const targetEditor = window.currentQRCodeEditor;\n                                    if (targetEditor) {\n                                        targetEditor.insertContent(`<img src=\"${response.datauri}\" alt=\"QR Code for ${formData.content}\" />`);\n                                    } else {\n                                        console.error('No target editor found');\n                                    }\n                                } else {\n                                    console.error('QR Code generation failed');\n                                }\n                                // Clean up the stored editor reference\n                                window.currentQRCodeEditor = null;\n                            },\n                            fail: function(ex) {\n                                console.error('Web service call failed', ex);\n                                // Clean up the stored editor reference\n                                window.currentQRCodeEditor = null;\n                            }\n                        }]);\n                        this.destroy();\n                    }\n                    else{\n                       contentInput.style.border = '2px solid red';\n                       return;\n                    }\n                    });\n                    qrcodeForm.dataset.listenerAttached = true;\n                }\n            } else {\n                console.warn('Form not found. Retrying...');\n                setTimeout(attachSubmitHandler, 500);\n            }\n        };\n        // Attach the submit handler\n        attachSubmitHandler();\n    }\n    configure(modalConfig) {\n        modalConfig.show = true;\n        super.configure(modalConfig);\n    }\n}\n"],"names":["QrcodeModal","Modal","registerEventListeners","attachSubmitHandler","qrcodeForm","window","document","getElementById","closebtn","querySelector","addEventListener","event","destroy","dataset","listenerAttached","preventDefault","contentInput","qrsize","value","style","border","qrmargin","trim","hexToRgba","hex","alpha","replace","bigint","parseInt","r","g","b","a","formData","content","size","margin","bgColor","parseFloat","fgColor","call","methodname","args","data","JSON","stringify","done","response","status","targetEditor","currentQRCodeEditor","insertContent","datauri","console","error","fail","ex","warn","setTimeout","configure","modalConfig","show","component"],"mappings":"ghBA4BqBA,oBAAoBC,eAKrCC,+BAEUC,oBAAsB,WAClBC,WAAaC,OAAOC,SAASC,eAAe,iBAC5CC,SAAUH,OAAOC,SAASG,cAAc,iEAC1CD,UACAA,SAASE,iBAAkB,SAAUC,aAC5BC,aAITR,WACKA,WAAWS,QAAQC,mBACpBV,WAAWM,iBAAkB,SAAUC,QACnCA,MAAMI,uBACAC,aAAeX,OAAOC,SAASG,cAAc,kBAC7CQ,OAASZ,OAAOC,SAASG,cAAc,gBAAgBS,SAC1DD,OAAS,KAAQA,OAAS,cACzBZ,OAAOC,SAASG,cAAc,gBAAgBU,MAAMC,OAAS,uBAG3DC,SAAWhB,OAAOC,SAASG,cAAc,kBAAkBS,SAC9DG,SAAU,KAAOA,SAAW,EAC3BhB,OAAOC,SAASG,cAAc,kBAAkBU,MAAMC,OAAS,wBAIlC,KAA9BJ,aAAaE,MAAMI,OAAc,wDAC9BC,UAAY,SAACC,SAAKC,6DAAQ,EAC5BD,IAAMA,IAAIE,QAAQ,KAAM,UAClBC,OAASC,SAASJ,IAAK,IACvBK,EAAKF,QAAU,GAAM,IACrBG,EAAKH,QAAU,EAAK,IACpBI,EAAa,IAATJ,aACH,CACHE,EAAGA,EACHC,EAAGA,EACHC,EAAGA,EACHC,EAAGP,QAILQ,SAAW,CACbC,QAAS5B,SAASG,cAAc,kBAAkBS,MAClDiB,KAAMP,SAAStB,SAASG,cAAc,gBAAgBS,OACtDkB,OAAQR,SAAStB,SAASG,cAAc,kBAAkBS,OAC1DmB,QAASd,UACLjB,SAASG,cAAc,oBAAoBS,MAC3CoB,0CAAWhC,SAASG,cAAc,4EAAeS,QAAS,IAE9DqB,QAAShB,UACLjB,SAASG,cAAc,kBAAkBS,MACzCoB,2CAAWhC,SAASG,cAAc,4EAAaS,QAAS,mBAI3DsB,KAAK,CAAC,CACPC,WAAY,+BACZC,KAAM,CAACC,KAAMC,KAAKC,UAAU,CACxBX,QAASD,SAASC,QAClBC,KAAMF,SAASE,KACfC,OAAQH,SAASG,OACjBC,QAASJ,SAASI,QAClBE,QAASN,SAASM,WAEtBO,KAAM,SAASC,aACPA,SAASC,OAAQ,OACXC,aAAe5C,OAAO6C,oBACxBD,aACAA,aAAaE,kCAA2BJ,SAASK,sCAA6BnB,SAASC,iBAEvFmB,QAAQC,MAAM,+BAGlBD,QAAQC,MAAM,6BAGlBjD,OAAO6C,oBAAsB,MAEjCK,KAAM,SAASC,IACXH,QAAQC,MAAM,0BAA2BE,IAEzCnD,OAAO6C,oBAAsB,cAGhCtC,eAGNI,aAAaG,MAAMC,OAAS,mBAI/BhB,WAAWS,QAAQC,kBAAmB,IAG1CuC,QAAQI,KAAK,+BACbC,WAAWvD,oBAAqB,OAIxCA,sBAEJwD,UAAUC,aACNA,YAAYC,MAAO,QACbF,UAAUC,kEA7GH5D,6BAEA8D,mDAFA9D,iCAGI8D"}